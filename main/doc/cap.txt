import os
import stardog
import pandas as pd
from dotenv import load_dotenv
from pandasgui import show

# 1) Load environment variables (if you have them in a .env file)
load_dotenv()

# 2) Configure Stardog connection details
conn_details = {
    'endpoint': 'https://sd-22eb3c93.stardog.cloud:5820',
    'username': os.getenv('STARDOG_USERNAME'),
    'password': os.getenv('STARDOG_PASSWORD')
}

database_name = 'defect'

# 3) Your larger SPARQL query
SPARQL_QUERY = """
PREFIX :    <http://api.stardog.com/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT
  ?defect
  ?defectID
  ?airfoil
  ?airfoilPartNum
  ?defectRegion
  ?regionPart
  ?index1Val
  ?index1DatumPart
  ?index2Val
  ?index2DatumPart
  ?depthVal
  ?lengthVal
  ?blendProc
  ?blendParticipant
  ?blendDepth
  ?blendLength
  ?blendFlatLen
  ?blendFillet
  ?blendPropFactor
  ?blendLoc
  ?blendNodeComp
FROM <tag:stardog:studio:ibr:model>
WHERE {
  #############################################################################
  # 1) Find each Airfoil Defect
  #############################################################################
  ?defect rdf:type :Airfoil_Defect .

  #############################################################################
  # 2) Get Defect ID (text)
  #############################################################################
  OPTIONAL {
    ?defectICE rdf:type :Designative_Information_Content_Entity ;
               :designates ?defect ;
               :generically_depends_on ?defectIBE .
    ?defectIBE :has_text_value ?defectID .
  }

  #############################################################################
  # 3) Defect Region + Region Part + Link to Airfoil
  #############################################################################
  ?defect :inheres_in ?defectRegion .
  ?airfoil :has_continuant_part ?defectRegion .

  OPTIONAL {
    ?defectRegion :has_continuant_part ?regionPart .
  }

  #############################################################################
  # 4) Airfoil "Part Number" text
  #############################################################################
  OPTIONAL {
    ?partNumICE rdf:type :Part_Number ;
                :designates ?airfoil ;
                :generically_depends_on ?partNumIBE .
    ?partNumIBE :has_text_value ?airfoilPartNum .
  }

  #############################################################################
  # 5) Defect Measurements: Index1, Index2, Depth, Length
  #############################################################################
  OPTIONAL {
    ?index1MICE rdf:type :Defect_Index1_Distance_to_Datum ;
                :describes ?defect ;
                :generically_depends_on ?index1IBE .
    ?index1IBE :has_decimal_value ?index1Val .
    OPTIONAL { ?index1MICE :measured_from_part ?index1DatumPart . }
  }

  OPTIONAL {
    ?index2MICE rdf:type :Defect_Index2_Distance_to_Datum ;
                :describes ?defect ;
                :generically_depends_on ?index2IBE .
    ?index2IBE :has_decimal_value ?index2Val .
    OPTIONAL { ?index2MICE :measured_from_part ?index2DatumPart . }
  }

  OPTIONAL {
    ?depthMICE rdf:type :Defect_Depth ;
               :describes ?defect ;
               :generically_depends_on ?depthIBE .
    ?depthIBE :has_decimal_value ?depthVal .
  }

  OPTIONAL {
    ?lengthMICE rdf:type :Defect_Length ;
                :describes ?defect ;
                :generically_depends_on ?lengthIBE .
    ?lengthIBE :has_decimal_value ?lengthVal .
  }

  #############################################################################
  # 6) Blend on Edge Process referencing this defect + measurements
  #############################################################################
  OPTIONAL {
    ?blendProc rdf:type :Blend_on_Edge_Process ;
               :is_about ?defect .
    OPTIONAL { ?blendProc :has_participant ?blendParticipant . }

    OPTIONAL {
      ?blendDepthMICE rdf:type :Blend_On_Edge_Depth_Measurement ;
                       :describes ?blendProc ;
                       :generically_depends_on ?blendDepthIBE .
      ?blendDepthIBE :has_decimal_value ?blendDepth .
    }

    OPTIONAL {
      ?blendLengthMICE rdf:type :Blend_On_Edge_Length_Measurement ;
                        :describes ?blendProc ;
                        :generically_depends_on ?blendLengthIBE .
      ?blendLengthIBE :has_decimal_value ?blendLength .
    }

    OPTIONAL {
      ?blendFlatLenMICE rdf:type :Blend_On_Edge_Flat_Length_Measurement ;
                         :describes ?blendProc ;
                         :generically_depends_on ?blendFlatLenIBE .
      ?blendFlatLenIBE :has_decimal_value ?blendFlatLen .
    }

    OPTIONAL {
      ?blendFilletMICE rdf:type :Blend_On_Edge_Fillet_Radius_Measurement ;
                        :describes ?blendProc ;
                        :generically_depends_on ?blendFilletIBE .
      ?blendFilletIBE :has_decimal_value ?blendFillet .
    }

    OPTIONAL {
      ?blendPropMICE rdf:type :Blend_On_Edge_Proportional_Factor_Measurement ;
                     :describes ?blendProc ;
                     :generically_depends_on ?blendPropIBE .
      ?blendPropIBE :has_decimal_value ?blendPropFactor .
    }

    OPTIONAL {
      ?blendLocMICE rdf:type :Blend_On_Edge_Location_Measurement ;
                    :describes ?blendProc ;
                    :generically_depends_on ?blendLocIBE .
      ?blendLocIBE :has_decimal_value ?blendLoc .
    }

    OPTIONAL {
      ?blendNodeCompMICE rdf:type :Blend_On_Edge_Node_Component ;
                         :describes ?blendProc ;
                         :generically_depends_on ?blendNodeCompIBE .
      ?blendNodeCompIBE :has_text_value ?blendNodeComp .
    }
  }
}
ORDER BY ?defect ?blendProc
"""

def main():
    # 4) Run the query
    with stardog.Connection(database_name, **conn_details) as conn:
        result = conn.select(SPARQL_QUERY)

    # 5) Convert the JSON results to a Pandas DataFrame
    df_rows = []
    for row in result["results"]["bindings"]:
        # We'll gather all the query variables in a dictionary
        new_row = {
            "defect": row.get("defect", {}).get("value"),
            "defectID": row.get("defectID", {}).get("value"),
            "airfoil": row.get("airfoil", {}).get("value"),
            "airfoilPartNum": row.get("airfoilPartNum", {}).get("value"),
            "defectRegion": row.get("defectRegion", {}).get("value"),
            "regionPart": row.get("regionPart", {}).get("value"),
            "index1Val": row.get("index1Val", {}).get("value"),
            "index1DatumPart": row.get("index1DatumPart", {}).get("value"),
            "index2Val": row.get("index2Val", {}).get("value"),
            "index2DatumPart": row.get("index2DatumPart", {}).get("value"),
            "depthVal": row.get("depthVal", {}).get("value"),
            "lengthVal": row.get("lengthVal", {}).get("value"),
            "blendProc": row.get("blendProc", {}).get("value"),
            "blendParticipant": row.get("blendParticipant", {}).get("value"),
            "blendDepth": row.get("blendDepth", {}).get("value"),
            "blendLength": row.get("blendLength", {}).get("value"),
            "blendFlatLen": row.get("blendFlatLen", {}).get("value"),
            "blendFillet": row.get("blendFillet", {}).get("value"),
            "blendPropFactor": row.get("blendPropFactor", {}).get("value"),
            "blendLoc": row.get("blendLoc", {}).get("value"),
            "blendNodeComp": row.get("blendNodeComp", {}).get("value"),
        }
        df_rows.append(new_row)

    df = pd.DataFrame(df_rows)
    print("\n=== Query Results in DataFrame ===")
    print(df)
    show(df)


if __name__ == "__main__":
    main()
