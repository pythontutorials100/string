import pyvista as pv
import numpy as np

##############################################################################
#                              User Inputs
##############################################################################

# Fixed position of the datum sphere (yellow), in inches
datum_x = -14.565
datum_y = -3.372
datum_z = 66.811

# The vertical offsets from the datum sphere for the two red spheres (inches)
index1Val = 10.0  # distance downward from datum
index2Val = 20.0  # distance downward from datum

# The horizontal offset (depth) in the opposite direction:
# now set to +x direction instead of -x
depthVal = 5.0  # in inches

# STL filename to visualize
stl_file = "airfoil.stl"

##############################################################################
#                           Position Calculations
##############################################################################

# 1) Datum sphere (yellow) â€” remains fixed
datum_pos = np.array([datum_x, datum_y, datum_z])

# 2) Red sphere #1 at some vertical offset from the datum
#    (moving "downward" by index1Val => z = datum_z - index1Val)
pos_red1 = np.array([datum_x, datum_y, datum_z - index1Val])

# 3) Red sphere #2 at another vertical offset from the datum
pos_red2 = np.array([datum_x, datum_y, datum_z - index2Val])

# 4) Red sphere #3, halfway between sphere #1 and #2 vertically,
#    but shifted in the *positive* x direction by depthVal
mid_z = (pos_red1[2] + pos_red2[2]) / 2.0
pos_red3 = np.array([datum_x + depthVal, datum_y, mid_z])

##############################################################################
#                         Distances & Arrow Positions
##############################################################################

# Vertical distances from the datum (for the first two red spheres) in inches
dist1 = abs(pos_red1[2] - datum_pos[2])
dist2 = abs(pos_red2[2] - datum_pos[2])

# Depth arrow: from (datum_x, middle_z) to (datum_x + depthVal, middle_z)
arrow_depth_start = np.array([datum_x, datum_y, mid_z])
arrow_depth_end   = np.array([datum_x + depthVal, datum_y, mid_z])

##############################################################################
#                         Create PyVista Objects
##############################################################################

# Load the STL mesh
mesh = pv.read(stl_file)

# Spheres
datum_sphere = pv.Sphere(radius=0.3, center=datum_pos)  # Yellow
sphere1      = pv.Sphere(radius=0.6, center=pos_red1)   # Red #1
sphere2      = pv.Sphere(radius=0.6, center=pos_red2)   # Red #2
sphere3      = pv.Sphere(radius=0.6, center=pos_red3)   # Red #3

# Vertical measurement lines & arrows (from red spheres down to datum):
# Sphere #1
arrow1_start = np.array([pos_red1[0] + 1.0, pos_red1[1], pos_red1[2]])  
arrow1_end   = np.array([datum_pos[0] + 1.0, datum_pos[1], datum_pos[2]])
line_v1      = pv.Line(arrow1_start, arrow1_end)
arrow1_s_down = pv.Arrow(start=arrow1_start, direction=[0, 0,  1], scale=1.0)
arrow1_s_up   = pv.Arrow(start=arrow1_end,   direction=[0, 0, -1], scale=1.0)

# Sphere #2
arrow2_start = np.array([pos_red2[0] + 2.0, pos_red2[1], pos_red2[2]])
arrow2_end   = np.array([datum_pos[0] + 2.0, datum_pos[1], datum_pos[2]])
line_v2      = pv.Line(arrow2_start, arrow2_end)
arrow2_s_down = pv.Arrow(start=arrow2_start, direction=[0, 0,  1], scale=1.0)
arrow2_s_up   = pv.Arrow(start=arrow2_end,   direction=[0, 0, -1], scale=1.0)

# Depth arrow for sphere #3 (horizontal shift in +X)
line_depth = pv.Line(arrow_depth_start, arrow_depth_end)
arrow_d1   = pv.Arrow(start=arrow_depth_start, direction=[ 1, 0, 0], scale=1.0)
arrow_d2   = pv.Arrow(start=arrow_depth_end,   direction=[-1, 0, 0], scale=1.0)

##############################################################################
#                               Plotter
##############################################################################

plotter = pv.Plotter()

# Add the mesh as wireframe
plotter.add_mesh(mesh, color="black", style="wireframe", opacity=0.5)

# Add spheres
plotter.add_mesh(datum_sphere, color="yellow", opacity=1.0)
plotter.add_mesh(sphere1,      color="red",    opacity=1.0)
plotter.add_mesh(sphere2,      color="red",    opacity=1.0)
plotter.add_mesh(sphere3,      color="red",    opacity=1.0)

# Add vertical measurement lines + arrows
plotter.add_mesh(line_v1, color="blue", line_width=5)
plotter.add_mesh(arrow1_s_down, color="blue")
plotter.add_mesh(arrow1_s_up,   color="blue")

plotter.add_mesh(line_v2, color="green", line_width=5)
plotter.add_mesh(arrow2_s_down, color="green")
plotter.add_mesh(arrow2_s_up,   color="green")

# Add depth measurement line + arrows
plotter.add_mesh(line_depth, color="magenta", line_width=5)
plotter.add_mesh(arrow_d1,   color="magenta")
plotter.add_mesh(arrow_d2,   color="magenta")

##############################################################################
#                                Labels
##############################################################################

# Label for red sphere #1
txt_pos_v1 = (arrow1_start + arrow1_end)/2
plotter.add_point_labels(
    [txt_pos_v1],
    [f"Dist1 = {dist1:.2f} in"],
    font_size=12,
    point_color="black"
)

# Label for red sphere #2
txt_pos_v2 = (arrow2_start + arrow2_end)/2
plotter.add_point_labels(
    [txt_pos_v2],
    [f"Dist2 = {dist2:.2f} in"],
    font_size=12,
    point_color="black"
)

# Label for depth arrow
txt_pos_depth = (arrow_depth_start + arrow_depth_end)/2
plotter.add_point_labels(
    [txt_pos_depth],
    [f"Depth = {depthVal:.2f} in"],
    font_size=12,
    point_color="black"
)

##############################################################################
#                           Reversed Camera View Buttons
##############################################################################
def set_xy_view(flag):
    """Reverse XY view: looking from negative Z towards origin."""
    plotter.camera.position = (0, 0, -150)
    plotter.camera.focal_point = (0, 0, 0)
    plotter.camera.up = (0, 1, 0)
    plotter.render()

def set_yz_view(flag):
    """Reverse YZ view: looking from negative X towards origin."""
    plotter.camera.position = (-100, 0, 50)
    plotter.camera.focal_point = (0, 0, 50)
    plotter.camera.up = (0, 0, 1)
    plotter.render()

def set_xz_view(flag):
    """Reverse XZ view: looking from negative Y towards origin."""
    plotter.camera.position = (0, -100, 50)
    plotter.camera.focal_point = (0, 0, 50)
    plotter.camera.up = (0, 0, 1)
    plotter.render()

plotter.add_checkbox_button_widget(set_xy_view, value=False, position=(10, 50))
plotter.add_text("XY", position=(25, 50), font_size=5, color="black")

plotter.add_checkbox_button_widget(set_yz_view, value=False, position=(10, 100))
plotter.add_text("YZ", position=(25, 100), font_size=5, color="black")

plotter.add_checkbox_button_widget(set_xz_view, value=False, position=(10, 150))
plotter.add_text("XZ", position=(25, 150), font_size=5, color="black")

plotter.show()
