We have a drone, UAV_A123_1, modeled as an actual Unmanned Aerial Vehicle in our ontology. Various data systems refer to it using the same textual ID—UAV #A123 B19325—but in different places: a database cell, an Excel spreadsheet cell, and an XML element. Each of these places is an Information Bearing Entity (IBE), storing the same textual string.

Meanwhile, we keep a single Designative Information Content Entity (ICE)—called ice uav 1 ID—that conceptually represents the drone’s ID. It designates the real-world UAV and ‘generically depends on’ the IBEs for its physical expression. This ensures no matter where the ID appears—database, spreadsheet, or XML file—we can trace all references back to the same drone.

We apply the same pattern to the drone’s maintenance details (where it undergoes a process at main plant 01, which is designated by a separate plant ID) and to an enterprise fleet containing two UAVs, each with its own ICE–IBE references. Even the model specification for UAV_A123_1, including sensor information, is captured through the same approach: the sensor spec text is stored in yet another XML element, represented by its own IBE.

This consistent ICE–IBE pattern means we can integrate data from maintenance, operations, and engineering specifications under a single ontology framework. Each real-world entity (drone, plant, spec) has one designative ID, and that ID can be physically stored in multiple places (the IBEs). Ultimately, it gives us a powerful way to unify data from scattered systems—database rows, Excel cells, XML tags—while keeping the conceptual references to our UAVs, plants, and specifications consistent and linked.

Key Benefit: This schema shows how the ICE–IBE pattern unifies data spread across different teams and systems without losing the distinction between the real-world object and the textual references in various files/databases. It provides a robust foundation for traceability, integration, and cross-domain consistency within an enterprise ontology.
