import pyvista as pv
import numpy as np

# Load the STL file
mesh = pv.read('airfoil.stl')

# Define sphere positions
pos1 = np.array([-15.0364, -2.23418, 53.3702])  # Sphere 1 position
pos2 = np.array([-14.565, -3.372, 66.811])  # Sphere 2 position
pos3 = np.array([-14.9543, -2.22295, 49.9698])  # New sphere (third point)

# Compute distances (ensuring purely vertical)
shortest_distance = abs(pos2[2] - pos1[2])  # Vertical distance between sphere2 and sphere1
longest_distance = abs(pos2[2] - pos3[2])  # Vertical distance between sphere2 and sphere3

# Offset values for clear visualization
offset_x_shortest = 2  # Shift in -x direction for the shortest distance arrow
offset_x_longest = 4  # Shift in -x direction for the longest distance arrow

# Ensure arrows are exactly vertical by keeping (x, y) constant and only changing z
arrow_start_shortest = np.array([pos2[0] - offset_x_shortest, pos2[1], pos2[2]])
arrow_end_shortest = np.array([pos2[0] - offset_x_shortest, pos2[1], pos1[2]])

arrow_start_longest = np.array([pos2[0] - offset_x_longest, pos2[1], pos2[2]])
arrow_end_longest = np.array([pos2[0] - offset_x_longest, pos2[1], pos3[2]])

# Create a plotter object
plotter = pv.Plotter()

# Add the mesh as a wireframe with transparency
plotter.add_mesh(mesh, color="black", style="wireframe", opacity=0.5)

# Create spheres
sphere1 = pv.Sphere(radius=0.9, center=pos1)
sphere2 = pv.Sphere(radius=0.9, center=pos2)
sphere3 = pv.Sphere(radius=0.9, center=pos3)

# Add spheres to the plotter
plotter.add_mesh(sphere1, color="red", opacity=1.0)
plotter.add_mesh(sphere2, color="red", opacity=1.0)
plotter.add_mesh(sphere3, color="red", opacity=1.0)

# Shortest Distance Arrow (Blue) - Perfectly Vertical
line_shortest = pv.Line(arrow_start_shortest, arrow_end_shortest)
arrow1_shortest = pv.Arrow(start=arrow_start_shortest, direction=[0, 0, -1], scale=1.5)
arrow2_shortest = pv.Arrow(start=arrow_end_shortest, direction=[0, 0, 1], scale=1.5)

# Longest Distance Arrow (Green) - Perfectly Vertical
line_longest = pv.Line(arrow_start_longest, arrow_end_longest)
arrow1_longest = pv.Arrow(start=arrow_start_longest, direction=[0, 0, -1], scale=1.5)
arrow2_longest = pv.Arrow(start=arrow_end_longest, direction=[0, 0, 1], scale=1.5)

# Add shortest distance measurement (blue)
plotter.add_mesh(line_shortest, color="blue", line_width=5)
plotter.add_mesh(arrow1_shortest, color="blue")
plotter.add_mesh(arrow2_shortest, color="blue")

# Add longest distance measurement (green)
plotter.add_mesh(line_longest, color="green", line_width=5)
plotter.add_mesh(arrow1_longest, color="green")
plotter.add_mesh(arrow2_longest, color="green")

# Define text positions
text_position_shortest = (arrow_start_shortest + arrow_end_shortest) / 2
text_position_longest = (arrow_start_longest + arrow_end_longest) / 2

# Add labels without background color
plotter.add_point_labels(
    [text_position_shortest], 
    [f"Shortest Distance from Datum: {shortest_distance:.2f} m"], 
    font_size=12, 
    point_color="black"
)

plotter.add_point_labels(
    [text_position_longest], 
    [f"Longest Distance from Datum: {longest_distance:.2f} m"], 
    font_size=12, 
    point_color="black"
)

# === View Control Functions ===
def set_xy_view(value):
    """Sets the XY view (top-down)."""
    plotter.camera.position = (0, 0, 100)
    plotter.camera.focal_point = (0, 0, 0)
    plotter.camera.up = (0, 1, 0)
    plotter.render()

def set_xy_reverse_view(value):
    """Sets the reverse XY view (bottom-up)."""
    plotter.camera.position = (0, 0, -100)
    plotter.camera.focal_point = (0, 0, 0)
    plotter.camera.up = (0, 1, 0)
    plotter.render()

def set_yz_view(value):
    """Sets the YZ view (side view from X-axis)."""
    plotter.camera.position = (100, 0, 0)
    plotter.camera.focal_point = (0, 0, 0)
    plotter.camera.up = (0, 0, 1)
    plotter.render()

def set_yz_reverse_view(value):
    """Sets the reverse YZ view (other side of X-axis)."""
    plotter.camera.position = (-100, 0, 0)
    plotter.camera.focal_point = (0, 0, 0)
    plotter.camera.up = (0, 0, 1)
    plotter.render()

def set_xz_view(value):
    """Sets the XZ view (side view from Y-axis)."""
    plotter.camera.position = (0, 100, 0)
    plotter.camera.focal_point = (0, 0, 0)
    plotter.camera.up = (0, 0, 1)
    plotter.render()

def set_xz_reverse_view(value):
    """Sets the reverse XZ view (other side of Y-axis)."""
    plotter.camera.position = (0, -100, 0)
    plotter.camera.focal_point = (0, 0, 0)
    plotter.camera.up = (0, 0, 1)
    plotter.render()

# === Add Interactive View Buttons (with labels) ===
#plotter.add_text("Views:", position="upper_left", font_size=12, color="black")

plotter.add_checkbox_button_widget(set_xy_view, value=False, position=(10, 50))
plotter.add_text("XY", position=(25, 50), font_size=5, color="black")

plotter.add_checkbox_button_widget(set_xy_reverse_view, value=False, position=(10, 100))
plotter.add_text("YX", position=(25, 100), font_size=5, color="black")

plotter.add_checkbox_button_widget(set_yz_view, value=False, position=(10, 150))
plotter.add_text("YZ", position=(25, 150), font_size=5, color="black")

plotter.add_checkbox_button_widget(set_yz_reverse_view, value=False, position=(10, 200))
plotter.add_text("ZY", position=(25, 200), font_size=5, color="black")

plotter.add_checkbox_button_widget(set_xz_view, value=False, position=(10, 250))
plotter.add_text("XZ", position=(25, 250), font_size=5, color="black")

plotter.add_checkbox_button_widget(set_xz_reverse_view, value=False, position=(10, 300))
plotter.add_text("ZX", position=(25, 300), font_size=5, color="black")

# Show the plot
plotter.show()
