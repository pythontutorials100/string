import requests
import os
import stardog  # While imported, it's not actively used in the modified code for simpler handling.
import pandas as pd
from dotenv import load_dotenv
from pandasgui import show
from urllib.parse import urlparse

# Define endpoint and repo
graphdb_url = "http://localhost:7200"  # change if using remote server
repo_name = "defect"
endpoint = f"{graphdb_url}/repositories/{repo_name}"

# SPARQL Query
query = """
PREFIX :    <http://api.stardog.com/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?defect ?defectID
FROM <tag:stardog:studio:ibr:model>
WHERE {
  ?defect rdf:type :Airfoil_Defect .
  OPTIONAL {
    ?defectICE rdf:type :Designative_Information_Content_Entity ;
               :designates ?defect ;
               :generically_depends_on ?defectIBE .
    ?defectIBE :has_text_value ?defectID .
  }
}
ORDER BY ?defect
"""

# Load credentials from .env
load_dotenv()
username = os.getenv('username')
password = os.getenv('password')

# Authentication setup
if username and password:
    auth = (username, password)
    print("Authentication enabled using .env credentials.")
else:
    auth = None
    print("No username or password provided.  Attempting query without authentication.")


def clean_uri(uri):
    # Split by '/' and get last segment
    return uri.split('/')[-1] if uri else 'N/A'


# Send query
try:
    if auth:
        response = requests.post(
            endpoint,
            data={"query": query},
            headers={"Accept": "application/sparql-results+json"},
            auth=auth
        )
    else:
        response = requests.post(
            endpoint,
            data={"query": query},
            headers={"Accept": "application/sparql-results+json"},
        )
except requests.exceptions.RequestException as e:
    print(f"Error connecting to GraphDB: {e}")
    exit()


# results
if response.status_code == 200:
    results = response.json()

    # Create a list of dictionaries for DataFrame
    data = []
    for result in results["results"]["bindings"]:
        defect_uri = result["defect"]["value"]
        defect_id = result.get("defectID", {}).get("value", "N/A")

        data.append({
            "Defect": clean_uri(defect_uri),
            "Defect ID": defect_id
        })

    # Create DataFrame
    df = pd.DataFrame(data)

    # Show interactive GUI
    show(df)
else:
    print("Query failed:", response.status_code, response.text)
